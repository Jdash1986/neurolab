# coding: utf-8import unittestimport numpy as npimport neurolab as nlfrom neurolab.error import MSE, SSE, SAE, MAE, CEEfrom neurolab.train import train_gd, train_gdm, train_gda, train_gdx, train_rpropfrom neurolab.train import train_bfgs, train_cg, train_ncgclass TestFF(unittest.TestCase):    def get_data(self):        size = 20        # Create train samples        x = np.linspace(-7, 7, size).reshape(size, 1)        y = np.sin(x) * 0.5        return x, y            def test_error(self):        goal = 0.5        error_funcs = [MSE(), SSE(), MAE(), SAE(), CEE()]                x, y = self.get_data()        for errorf in error_funcs:            net = nl.net.newff([[-7, 7]],[5, 1])            #net.trainf = nl.train.train_gd            net.errorf = errorf            # Train network            error = net.train(x, y, epochs=500, show=0, goal=goal)            # Simulate network            out = net.sim(x)            # Tests            self.assertLessEqual(error[-1], error[0])            if not isinstance(errorf, SAE):                self.assertLess(error[-1], goal)            self.assertEqual(error[-1], net.errorf(y, out))            self.assertLess(np.sum(np.abs(y - out)) / len(x), goal * 10)        def train(self):        goal = 0.5        funcs = [train_gd, train_gdm, train_gda, train_gdx, train_rprop]                        x, y = self.get_data()        for func in funcs:            net = nl.net.newff([[-7, 7]],[5, 1])            #net.trainf = nl.train.train_gd            net.tarinf = func            # Train network            error = net.train(x, y, epochs=500, show=0, goal=goal)            # Simulate network            out = net.sim(x)            # Tests            self.assertLessEqual(error[-1], error[0])            self.assertLess(error[-1], goal)            self.assertEqual(error[-1], net.errorf(y, out))            self.assertLess(np.sum(np.abs(y - out)) / len(x), goal * 10)