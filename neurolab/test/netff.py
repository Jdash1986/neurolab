# coding: utf-8import unittestimport numpy as npimport neurolab as nlfrom neurolab.error import MSE, SSE, SAE, MAE, CEEfrom neurolab.train import train_gd, train_gdm, train_gda, train_gdx, train_rpropfrom neurolab.train import train_bfgs, train_cg, train_ncgclass TestFF(unittest.TestCase):        def check(self, funcs, test, goal):        size = 20        # Create train samples        x = np.linspace(-7, 7, size).reshape(size, 1)        y = np.sin(x) * 0.5                for func in funcs:            net = nl.net.newff([[-7, 7]],[5, 1])            if test == 'train':                net.tarinf = func            if test == 'error':                net.trainf = nl.train.train_gdx                net.errorf = func            # Train network            error = net.train(x, y, epochs=500, show=0, goal=goal)            # Simulate network            out = net.sim(x)            # Tests            self.assertLessEqual(error[-1], error[0])            self.assertLess(error[-1], goal)            self.assertEqual(error[-1], net.errorf(y, out))            self.assertLess(np.sum(np.abs(y - out)) / len(x), goal * 10)        def test_error2(self):        funcs = [MSE(), SSE(), MAE()]        self.check(funcs, 'error', 0.5)        def test_sae(self):        funcs = [SAE()]        self.check(funcs, 'error', 5.0)        def test_error_gd(self):        funcs = [train_gdm, train_gda, train_gdx, train_rprop]        self.check(funcs, 'train', 0.5)        def test_gd(self):        funcs = [train_gd]        self.check(funcs, 'train', 1)    def test_error_spo(self):        funcs = [train_bfgs, train_cg, train_ncg]        self.check(funcs, 'train', 0.5)